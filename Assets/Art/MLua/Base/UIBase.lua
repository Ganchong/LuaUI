---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 干冲.
--- DateTime: 2018/3/27 17:28
---
UIBase = class("UIBase")

function UIBase:OnAwakeUI()
end

function UIBase:OnEnableUI()
end

function UIBase:OnDisableUI()
end

function UIBase:OnDestroyUI()
    self:UnRegisterAllEvent()
    if self.destroyAction ~=nil then
        self:destroyAction()
    end
end


--注册事件
function UIBase:RegisterEvent(type,event,isOnce,isFirst)
    if self.eventMap ==nil then
        self.eventMap = YMDictionary:New('string','table')
    end
    LuaAPP.GetGlobalEvent():AddEvent(type,event,isOnce,isFirst)
    if self.eventMap:ContainsKey(type) then
        self.eventMap[type]:Add(event)
    else
        local list = YMList:New('function')
        list:Add(event)
        self.eventMap:Add(type,list)
    end
end

--注销事件
function UIBase:UnRegisterEvent(type,event)
    if self.eventMap==nil then
        return
    end
    if self.eventMap:ContainsKey(type) then
        self.eventMap[type]:Remove(event)
        LuaAPP.GetGlobalEvent():RemoveEvent(type,event)
    end
end

--注销所有事件
function UIBase:UnRegisterAllEvent()
    if self.eventMap == nil then
        return
    end
    for k, v in pairs(self.eventMap) do
        LuaAPP.GetGlobalEvent():RemoveEvent(k)
    end
    self.eventMap:Clear()
end

--创建定时器
function UIBase:NewTimer(timer,intervalTime)
    if self.timerList == nil then
        self.timerList = YMList:New('table')
    end
    if timer~=nil then
        if not self.timerList:Contains(timer) then
            self.timerList:Add(timer)
        end
        LuaAPP.GetTimerManager():AddTimer(timer)
    else
        if intervalTime == nil then
            intervalTime = 1
        end
        timer = LuaAPP.GetTimerManager():GetTimer(intervalTime)
        self.timerList:Add(timer)
    end
    return timer
end

--停止所有计时器
function UIBase:StopAllTimer()

    if self.timerList == nil then
        return
    end
    --停止自身中的所有定时器
    self.timerList:ForEach(function(timer)
        timer:Stop()
    end)
    if self.subUIs == nil then
        return
    end
    --停止所有子UI中的所有定时器
    for k, v in pairs(self.subUIs) do
        if v ~= nil then
            v.timerList:ForEach(function(timer)
                timer:Stop()
            end)
        end
    end
end


--开启Update方法，请不要在UIBase中声明Update方法
function UIBase:StartUpdate()
    if self.Update ~= nil then
        if self.handle ~=nil then
            UpdateBeat:RemoveListener(self.handle)
        else
            self.handle = UpdateBeat:CreateListener(self.Update,self)
        end
        UpdateBeat:AddListener(self.handle)
    end
end

--开启FixedUpdate方法，请不要在UIBase中声明FixedUpdate方法
function UIBase:StartFixedUpdate()
    if self.FixedUpdate ~= nil then
        if self.fixHandle ~=nil then
            FixedUpdateBeat:RemoveListener(self.fixHandle)
        else
            self.fixHandle = FixedUpdateBeat:CreateListener(self.FixedUpdate,self)
        end
        FixedUpdateBeat:AddListener(self.fixHandle)
    end
end

--开启LateUpdate方法，请不要在UIBase中声明LateUpdate方法
function UIBase:StartLateUpdate()
    if self.LateUpdate ~= nil then
        if self.lateHandle ~=nil then
            LateUpdateBeat:RemoveListener(self.lateHandle)
        else
            self.lateHandle = LateUpdateBeat:CreateListener(self.LateUpdate,self)
        end
        LateUpdateBeat:AddListener(self.lateHandle)
    end
end
--停止Update方法
function UIBase:StopUpdate()
    if self.handle~=nil then
        UpdateBeat:RemoveListener(self.handle)
    end
end
--停止FixedUpdate方法
function UIBase:StopFixedUpdate()
    if self.fixHandle~=nil then
        FixedUpdateBeat:RemoveListener(self.fixHandle)
    end
end
--停止LateUpdate方法
function UIBase:StopLateUpdate()
    if self.lateHandle~=nil then
        LateUpdateBeat:RemoveListener(self.lateHandle)
    end
end

--清除update
function UIBase:ClearBeat()
    self:StopUpdate()
    self:StopFixedUpdate()
    self:StopLateUpdate()
end