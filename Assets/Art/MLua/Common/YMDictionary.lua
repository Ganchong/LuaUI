---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 干冲.
--- DateTime: 2018/3/29 17:07
--- 字典 实现方式和有序列表类似

YMDictionary = {}
YMDictionary.__index = YMDictionary

--创建字典
function YMDictionary:New(tk, tv)
    local o = {keyType = tk, valueType = tv}
    setmetatable(o, self)
    o.keyList = {}
    return o
end

--添加词，这里就不做类型匹配了，用户自行管理
function YMDictionary:Add(key, value)
    if self[key] == nil then
        self[key] = value
        table.insert(self.keyList, key)
    else
        self[key] = value
    end
end

--清除字典 先value=nil，后移除key
function YMDictionary:Clear()
    local count = self:Count()
    for i=count,1,-1 do
        self[self.keyList[i]] = nil
        table.remove(self.keyList)
    end
end
--是否包含key
function YMDictionary:ContainsKey(key)
    local count = self:Count()
    for i=1,count do
        if self.keyList[i] == key then
            return true
        end
    end
    return false
end

--是否包含value
function YMDictionary:ContainsValue(value)
    local count = self:Count()
    for i=1,count do
        if self[self.keyList[i]] == value then
            return true
        end
    end
    return false
end

--key的长度，keyList是一个有序的列表不含nil，而valueList可能含有nil
--当然这里的长度也不是表的真实长度，真实长度用不到就不写了
function YMDictionary:Count()
    return table.getn(self.keyList)
end

--迭代器
function YMDictionary:Iter()
    local i = 0
    local n = self:Count()
    return function ()
        i = i + 1
        if i <= n then
            return self.keyList[i]
        end
        return nil
    end
end

--移除key和对应的值
function YMDictionary:Remove(key)
    if self:ContainsKey(key) then
        local count = self:Count()
        for i=1,count do
            if self.keyList[i] == key then
                table.remove(self.keyList, i)
                break
            end
        end
        self[key] = nil
    end
end

--[[ eg.
    local dic = YMDictionary:New('number','string')
        dic:Add(2,"you")
        dic:Add(3,"are")
        dic:Add(4,"a")
        dic:Add(1,"sb")
        --dic:ToString()
        dic:Foreach(
        function(k,v)
            Log("key: "..tostring(k).."value: "..tostring(v))
        end)
]]--

--遍历，这里感觉消耗很大，暂且这样写着，慎用
function YMDictionary:Foreach(action)
    if (action == nil or type(action) ~= 'function') then
        Log('action is invalid!')
        return
    end
    local it = self:Iter()
    while true do
        local key = it()
        if key ~= nil then
            local value = self[key]
            action(key,value)
        else
            break --break 用于跳出循环，在语句的最后面
        end
    end
end

--用于打印信息
function YMDictionary:ToString()
    local it = self:Iter()
    while true do
        local key = it()
        if key ~= nil then
            local value = self[key]
            Log('key: ' .. tostring(key) .. ' value: ' .. tostring(value))
        else
            break --break 用于跳出循环，在语句的最后面
        end
    end
end

--key的类型
function YMDictionary:KeyType()
    return self.keyType
end

--value的类型
function YMDictionary:ValueType()
    return self.valueType
end