---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 干冲.
--- DateTime: 2018/4/8 12:09
--- 事件类(事件分发系统)

YMEvent = class("YMEvent")

function YMEvent:ctor()
    --事件字典
    if self.eventDic == nil then
        self.eventDic = YMDictionary:New('string','table')
    end
    --一次性事件字典
    if self.onceEventDic == nil then
        self.onceEventDic =  YMDictionary:New('string','table')
    end
end

local this = YMEvent

--添加事件
function this:AddEvent(type, callback, isOnce, isFirst)
    local currentEventDic
    if isOnce~=nil and isOnce then
        currentEventDic = self.onceEventDic
    else
        currentEventDic = self.eventDic
    end
    local list
    if currentEventDic:ContainsKey(type) then
        list = currentEventDic[type]
    else
        list = YMList:New('function')
        currentEventDic:Add(type,list)
    end
    list:Remove(callback)
    if isFirst~=nil and isFirst then
        list:Insert(0,callback)
    else
        list:Add(callback)
    end
    local len = currentEventDic[type]:Count()
    len = list:Count()
end

--移除事件
function this:RemoveEvent(type,callback)
    if self.eventDic:ContainsKey(type) then
        if callback~=nil then
            --移除具体事件
            self.eventDic[type]:Remove(callback)
        else
            --移除某类事件
            self.eventDic:Remove(type)
        end
    end
    if self.onceEventDic:ContainsKey(type) then
        if callback~=nil then
            self.onceEventDic[type]:Remove(callback)
        else
            self.onceEventDic:Remove(type)
        end
    end
end

--清除所有事件
function this:ClearEvent()
    self.eventDic:Clear()
    self.onceEventDic:Clear()
end

--分派事件
function this:DispatchEvent(type,...)
    local args = {...}
    local eventList
    if self.eventDic:ContainsKey(type) then
        eventList = self.eventDic[type]
        for i = 1, #eventList do
            eventList[i](args)
        end
    end
    if self.onceEventDic:ContainsKey(type) then
        eventList = self.onceEventDic[type]
        for i = 1, #eventList do
            eventList[i](args)
        end
        eventList:Clear()
    end
end

--是否包含事件
function this:ContainedEvent(type,callback)
    if callback ==nil then
        return self.eventDic:ContainsKey(type)
    end
    if self.eventDic:ContainsKey(type) then
        return self.eventDic[type]:Contains(callback)
    end
    return nil
end

--是否包含一次性事件
function this:ContainedOnceEvent(type, callback)
    if callback ==nil then
        return self.onceEventDic:ContainsKey(type)
    end
    if self.onceEventDic:ContainsKey(type) then
        return self.onceEventDic[type]:Contains(callback)
    end
    return nil
end
--是否包含某类事件
function this:ContainedEventByType(type)
    return self.eventDic:ContainsKey(type) or self.onceEventDic:ContainsKey(type)
end


return this