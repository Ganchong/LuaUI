---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 干冲.
--- DateTime: 2018/3/24 19:06
--- 登录窗口

require("Define/PlayerSetting")
local SDKHelper = SDKHelper
local PlayerPrefs = PlayerPrefsTool
local ServerManager = ServerManager
local CertifyManager = CertifyManager

LoginWindow = class("LoginWindow", WindowBase)

local this = LoginWindow

function this:InitUI(uiObj)
    self.UIObj = uiObj
    self:BindWindow(uiObj)
    self:AddButtonEvent()
end

function this:BindWindow(uiObj)
    self.version = LuaUtil.GetChildComponent(uiObj, "root/version", ComponentName.UIText)--版本号
    self.serverButton = LuaUtil.GetChildComponent(uiObj, "root/server", ComponentName.UIButton)--服务器列表按钮
    self.serverText = LuaUtil.GetChildComponent(uiObj, "root/server/Text", ComponentName.UIText)--服务器名称
    self.userName = LuaUtil.GetChildComponent(uiObj, "root/userName", ComponentName.InputField)--账号
    self.inputServer = LuaUtil.GetChildComponent(uiObj, "root/inputServer", ComponentName.InputField)--密码(ip)
    self.loginButton = LuaUtil.GetChildComponent(uiObj, "root/LoginButton", ComponentName.UIButton)--登录按钮
    self.loginButtonText = LuaUtil.GetChildComponent(uiObj, "root/LoginButton/Text", ComponentName.UIText)--登录按钮
end

--添加事件
function this:AddButtonEvent()
    self.loginButton.onClick:AddListener(function()
        self:LoginEvent()
    end)
end

--登录事件处理
function this:LoginEvent()
    if self.openSDK then
        if not SDKHelper.isLogin() then
            SDKHelper.login(function(msg)
                self:LoginBack(msg)
                return
            end)
        end
        if self.curServer == nil then
            --TODO 提示
            return
        end
        SDKHelper.saveState(StateStep.STEP27)
        CertifyManager:init(self.curServer, nil)
        return
    end
    if self.userName.text == nil or self.userName.text == "" then
        LogError("userName can't be empty")
        --TODO 提示
        return
    end
    PlayerPrefs.SetString(PlayerSetting.UID, self.userName.text)
    PlayerPrefs.SetString(PlayerSetting.SeverIP, self.inputServer.text)
    local uid = tonumber(self.userName.text)
    local server = tostring(self.inputServer.text)
    if server ~= nil and server ~= nil then
        local strs = string.split(server, ':')
        if #strs == 3 then
            self.curServer.ID = -1
            self.curServer.Sid = SDKHelper.SERVERID
            self.curServer.IpAddress = strs[1]
            self.curServer.HttpPort = tonumber(strs[2])
            self.curServer.TcpPort = tonumber(strs[3])
        end
    end
    if self.curServer.ID ~= -1 then
        PlayerPrefs.SetInt(PlayerSetting.ServerID, self.curServer.ID)
    end
    CertifyManager:init(self.curServer, uid)
end

function this:OnEnableUI(param)
    self.openSDK = GameManager.openSDK
    LuaAPP.GetBackGroundManager():Change("loginBack")
    self.version.text = Language.Get("Version", tostring(SDKHelper.getVersion()))
    local action = function()
        self.curServer = ServerManager:getLastLoginServer():getServer()
        self.serverText.text = Language.Get("loginWindow_04", tostring(self.curServer.ID)) .. " " .. tostring(self.curServer.Name)
    end
    if not self.openSDK then
        action()
    else
        if SDKHelper.isLogin then
            action()
        else
            local action1 = function()
                SDKHelper.saveState(StateStep.STEP20)
                CoroutineCenter.delayRunFrame(
                        function()
                            SDKHelper.login(
                                    function(msg)
                                        self:LoginBack(msg)
                                    end)
                        end, 1)
            end
            local affiches = LuaSDKHelper.getAffiches()
            if affiches ~= nil and affiches.Count() > 0 then
                SDKHelper.saveState(StateStep.STEP19)
                LuaAPP.GetUIManager():OpenWindow(WindowName.AfficheWindow, affiches, action1)
            else
                action1()
            end
        end
    end
end

--登录处理
function this:LoginBack(msg)
    if msg == "success" then
        local loginServer = ServerManager:getLastLoginServer()
        if loginServer == nil or loginServer:getServer() == nil then
            --TODO 提示
            return
        end
        self.curServer = loginServer:getServer()
        self.serverText.text = Language.Get("loginWindow_4", self.curServer.ID) .. "  " .. self.curServer.Name
        if self.openSDK then
            self.userName.gameObject:SetActive(false)
            self.inputServer.gameObject:SetActive(false)
        end
        SDKHelper.saveState(StateStep.STEP24)
    end
end

function this:GetUIType()
    return WindowType.FullType
end
return this

